from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '002d3ef70489'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('address', sa.String(length=255), nullable=True),
                    sa.Column('description', sa.String(length=255), nullable=True),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('sensor_types',
                    sa.Column('type', sa.String(length=255), nullable=False),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('sensors',
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('type_id', sa.Integer(), nullable=True),
                    sa.Column('location_id', sa.Integer(), nullable=True),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
                    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
                    sa.ForeignKeyConstraint(['type_id'], ['sensor_types.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('sensor_moisture_data',
                    sa.Column('sensor_id', sa.Integer(), nullable=False),
                    sa.Column('moisture', sa.Float(), nullable=False),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
                    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('sensor_temperature_data',
                    sa.Column('sensor_id', sa.Integer(), nullable=False),
                    sa.Column('humidity', sa.Float(), nullable=False),
                    sa.Column('temperature', sa.Float(), nullable=False),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
                    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('settings',
                    sa.Column('sensor_id', sa.Integer(), nullable=False),
                    sa.Column('max_temperature', sa.Float(), nullable=True),
                    sa.Column('min_temperature', sa.Float(), nullable=True),
                    sa.Column('max_humidity', sa.Float(), nullable=True),
                    sa.Column('min_humidity', sa.Float(), nullable=True),
                    sa.Column('max_moisture', sa.Float(), nullable=True),
                    sa.Column('min_moisture', sa.Float(), nullable=True),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
                    sa.ForeignKeyConstraint(['sensor_id'], ['sensors.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###

    # Insert initial data using op.bulk_insert()
    sensor_types_table = sa.sql.table('sensor_types',
                                      sa.Column('type', sa.String)
                                      )

    locations_table = sa.sql.table('locations',
                                   sa.Column('name', sa.String),
                                   sa.Column('address', sa.String)
                                   )

    sensors_table = sa.sql.table('sensors',
                                 sa.Column('name', sa.String),
                                 sa.Column('type_id', sa.Integer),
                                 sa.Column('location_id', sa.Integer)
                                 )

    settings_table = sa.sql.table('settings',
                                  sa.Column('sensor_id', sa.Integer),
                                  sa.Column('max_temperature', sa.Float),
                                  sa.Column('min_temperature', sa.Float),
                                  sa.Column('max_humidity', sa.Float),
                                  sa.Column('min_humidity', sa.Float),
                                  sa.Column('max_moisture', sa.Float),
                                  sa.Column('min_moisture', sa.Float)
                                  )

    op.bulk_insert(sensor_types_table,
                   [
                       {'type': 'temperature'},
                       {'type': 'moisture'}
                   ])

    op.bulk_insert(locations_table,
                   [
                       {'name': 'Weed Garden', 'address': '80 Le Loi, Thach Thang, Hai Chau, Da Nang'}
                   ])

    op.bulk_insert(sensors_table,
                   [
                       {'name': 'WD-Temperature-01', 'type_id': 1, 'location_id': 1},
                       {'name': 'WD-Moisture-01', 'type_id': 2, 'location_id': 1}
                   ])

    # Provide default or null values for nullable fields if they are not applicable
    op.bulk_insert(settings_table,
                   [
                       {'sensor_id': 1, 'max_temperature': 27, 'min_temperature': 10, 'max_humidity': 90, 'min_humidity': 10, 'max_moisture': None, 'min_moisture': None},
                       {'sensor_id': 2, 'max_temperature': None, 'min_temperature': None, 'max_humidity': None, 'min_humidity': None, 'max_moisture': 90, 'min_moisture': 10}
                   ])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('settings')
    op.drop_table('sensor_temperature_data')
    op.drop_table('sensor_moisture_data')
    op.drop_table('sensors')
    op.drop_table('sensor_types')
    op.drop_table('locations')
    # ### end Alembic commands ###
